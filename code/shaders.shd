//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for TestApp sample
//------------------------------------------------------------------------------

@uniform_block vsParams VSParams
    @uniform mat4 mvp ModelViewProjection
@end

@texture_block fsTextures FSTextures
    @texture sampler2D tex Texture
@end

//------------------------------------------------------------------------------
//  Vertex and fragment shaders for rendering into the offscreen render target
//
@vs renderTargetVS
@use_uniform_block vsParams
@in vec4 position
@in vec4 normal
@out vec4 nrm
{
    _position = mul(mvp, position);
    nrm = normal;
}
@end

@fs renderTargetFS
@in vec4 nrm
{
    _color = nrm * 0.5 + 0.5;
}
@end

@bundle RenderTarget
@program renderTargetVS renderTargetFS
@end

//------------------------------------------------------------------------------
//  Vertex and fragment shaders for rendering into the frame buffer.
//
@vs mainVS
@use_uniform_block vsParams
@in vec4 position
@in vec4 normal
@in vec2 texcoord0
@out vec4 nrm
@out vec2 uv
{
    _position = mul(mvp, position);
    uv = texcoord0;
    nrm = normalize(mul(mvp, normal));
}
@end

@fs mainFS
@use_texture_block fsTextures
@in vec4 nrm
@in vec2 uv
{
    vec4 c = tex2D(tex, uv * vec2(40.0, 20.0));
    float l = clamp(dot(nrm.xyz, normalize(vec3(1.0, 1.0, -1.0))), 0.0, 1.0) * 2.0;
    _color = c * (l + 0.25);
}
@end

@bundle Main
@program mainVS mainFS
@end

